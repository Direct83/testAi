{
  "steps": [
    "Создать структуру проекта: process_data.py, tests/test_process_data.py, README.md, requirements.txt.",
    "В requirements.txt добавить зависимости: pandas, openpyxl, pytest.",
    "Реализовать CLI в process_data.py с использованием argparse: обязательные флаги --input и --column.",
    "Проверять существование файла. Если не найден — печатать ошибку в stderr и завершаться с кодом 3.",
    "Определять загрузку по расширению: .csv -> pandas.read_csv, .xlsx -> pandas.read_excel(engine='openpyxl'). Для иных расширений — печатать ошибку и завершаться с кодом 1.",
    "Нормализовать имена столбцов: trim пробелы по краям (df.columns = df.columns.str.strip()).",
    "Проверить наличие указанной колонки. Если отсутствует — печатать понятную ошибку и завершаться с кодом 2.",
    "Извлечь столбец, привести значения к числу: заменить запятую на точку в строках, затем pandas.to_numeric(errors='coerce'), отбросить NaN.",
    "Если после приведения нет ни одного числового значения — печатать ошибку и завершаться с кодом 1.",
    "Посчитать среднее и вывести только число в stdout с форматированием до 3 знаков после запятой (format: f\"{mean:.3f}\"). Завершиться с кодом 0.",
    "Все сообщения об ошибках печатать в stderr, без трейсбеков для ожидаемых ситуаций.",
    "Добавить pytest-тесты, использующие tmp_path и subprocess.run для проверки CLI, stdout/stderr и кодов выхода.",
    "Подготовить README с инструкцией по установке зависимостей, примерами запуска CLI и запуском тестов."
  ],
  "libraries": [
    "pandas",
    "openpyxl",
    "pytest"
  ],
  "edge_cases": [
    "Файл не найден (ожидаемый код 3).",
    "Неподдерживаемое расширение файла (ожидаемый код 1).",
    "Указанная колонка отсутствует (ожидаемый код 2).",
    "Колонка содержит только нечисловые значения (ожидаемый код 1).",
    "Смешанные типы в колонке: строки, числа, пропуски — некорректные значения игнорируются.",
    "Пустой файл или файл с заголовком без строк данных (ожидаемый код 1).",
    "Excel с несколькими листами — читать первый по умолчанию.",
    "Десятичная запятая в значениях ('1,23') — нормализовать заменой на точку перед конверсией.",
    "Лишние пробелы вокруг имени колонки в файле — заголовки триммируются.",
    "Очень большие файлы — использовать потоковую загрузку для CSV при необходимости (в базовой версии читаем целиком)."
  ],
  "tests": [
    {
      "name": "CSV: успешный расчет среднего и форматирование до 3 знаков",
      "arrange": "Создать временный CSV с содержимым: 'Price\\n10\\n20\\n30\\n'.",
      "act": "python process_data.py --input /tmp/data.csv --column Price",
      "assert": "Код выхода 0; stdout ровно '20.000\\n'; stderr пуст."
    },
    {
      "name": "XLSX: успешный расчет среднего и корректное округление",
      "arrange": "Создать временный XLSX с колонкой Price = [1.2349, 1.2345].",
      "act": "python process_data.py --input /tmp/data.xlsx --column Price",
      "assert": "Код выхода 0; stdout ровно '1.235\\n' (округление по правилам); stderr пуст."
    },
    {
      "name": "Отсутствующая колонка — код 2 и понятная ошибка",
      "arrange": "Создать временный CSV с колонкой Cost и данными; колонки Price нет.",
      "act": "python process_data.py --input /tmp/data.csv --column Price",
      "assert": "Код выхода 2; stderr содержит 'Колонка \"Price\" не найдена'; stdout пуст."
    },
    {
      "name": "Файл не найден — код 3",
      "arrange": "Не создавать файл, указать несуществующий путь.",
      "act": "python process_data.py --input /tmp/missing.xlsx --column Price",
      "assert": "Код выхода 3; stderr содержит 'Файл не найден'; stdout пуст."
    },
    {
      "name": "Отсутствует обязательный аргумент --column — код 1",
      "arrange": "Подготовка не требуется.",
      "act": "python process_data.py --input /tmp/data.csv",
      "assert": "Код выхода 1; stderr содержит подсказку об использовании и упоминание обязательного аргумента '--column'."
    },
    {
      "name": "Смешанные значения: игнор нечисловых, корректное среднее",
      "arrange": "Создать CSV: 'Price\\n10\\nN/A\\n20x\\n30.5\\n'.",
      "act": "python process_data.py --input /tmp/mixed.csv --column Price",
      "assert": "Код выхода 0; stdout ровно '20.250\\n' (среднее по [10, 30.5]); stderr пуст."
    },
    {
      "name": "Десятичная запятая нормализуется",
      "arrange": "Создать CSV: 'Price\\n10,5\\n20,5\\n'.",
      "act": "python process_data.py --input /tmp/commas.csv --column Price",
      "assert": "Код выхода 0; stdout ровно '15.500\\n'; stderr пуст."
    },
    {
      "name": "Пустой датасет — нет числовых значений, код 1",
      "arrange": "Создать CSV только с заголовком 'Price' и без строк.",
      "act": "python process_data.py --input /tmp/empty.csv --column Price",
      "assert": "Код выхода 1; stderr содержит 'нет числовых значений' (или аналогичное сообщение); stdout пуст."
    },
    {
      "name": "Лишние пробелы в заголовке — колонка находится после trim",
      "arrange": "Создать CSV с заголовком ' Price ' и данными 5 и 7.",
      "act": "python process_data.py --input /tmp/spaced.csv --column Price",
      "assert": "Код выхода 0; stdout ровно '6.000\\n'; stderr пуст."
    },
    {
      "name": "Неподдерживаемое расширение — код 1",
      "arrange": "Создать пустой файл /tmp/data.txt.",
      "act": "python process_data.py --input /tmp/data.txt --column Price",
      "assert": "Код выхода 1; stderr содержит 'Неподдерживаемый формат файла'; stdout пуст."
    }
  ],
  "cli": {
    "command": "python process_data.py",
    "flags": [
      "--input",
      "--column"
    ],
    "exit_codes": {
      "ok": 0,
      "invalid_args": 1,
      "missing_column": 2,
      "file_not_found": 3
    }
  }
}